
PdM_P4_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000c3c  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000008  08000de8  08000de8  00010de8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000df0  08000df0  0002001c  2**0
                  CONTENTS
  4 .ARM          00000000  08000df0  08000df0  0002001c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000df0  08000df0  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000df0  08000df0  00010df0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000df4  08000df4  00010df4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08000df8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002001c  2**0
                  CONTENTS
 10 .bss          00000030  2000001c  2000001c  0002001c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000004c  2000004c  0002001c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000365f  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000d91  00000000  00000000  000236ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000430  00000000  00000000  00024440  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000398  00000000  00000000  00024870  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024c3e  00000000  00000000  00024c08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000068dc  00000000  00000000  00049846  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e0978  00000000  00000000  00050122  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00130a9a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000e44  00000000  00000000  00130aec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000001c 	.word	0x2000001c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08000dd0 	.word	0x08000dd0

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000020 	.word	0x20000020
 80001e8:	08000dd0 	.word	0x08000dd0

080001ec <Error_Handler>:
  */

#include "API_delay.h"

// control de errores
static void Error_Handler(void) {
 80001ec:	b580      	push	{r7, lr}
 80001ee:	af00      	add	r7, sp, #0

	// enciende el led rojo indicando error
	BSP_LED_Toggle(LED2);
 80001f0:	2001      	movs	r0, #1
 80001f2:	f000 f897 	bl	8000324 <BSP_LED_Toggle>
	while(1) {
 80001f6:	e7fe      	b.n	80001f6 <Error_Handler+0xa>

080001f8 <delayInit>:
	}

}

// función de inicializacion del "delay"
void delayInit( delay_t * delay, tick_t duration ) {
 80001f8:	b580      	push	{r7, lr}
 80001fa:	b082      	sub	sp, #8
 80001fc:	af00      	add	r7, sp, #0
 80001fe:	6078      	str	r0, [r7, #4]
 8000200:	6039      	str	r1, [r7, #0]

	// control de errores en los parámetros

	if (delay == NULL || duration == 0 )
 8000202:	687b      	ldr	r3, [r7, #4]
 8000204:	2b00      	cmp	r3, #0
 8000206:	d002      	beq.n	800020e <delayInit+0x16>
 8000208:	683b      	ldr	r3, [r7, #0]
 800020a:	2b00      	cmp	r3, #0
 800020c:	d101      	bne.n	8000212 <delayInit+0x1a>
		Error_Handler();
 800020e:	f7ff ffed 	bl	80001ec <Error_Handler>

	delay->running = false;
 8000212:	687b      	ldr	r3, [r7, #4]
 8000214:	2200      	movs	r2, #0
 8000216:	721a      	strb	r2, [r3, #8]
	delay->duration = duration;
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	683a      	ldr	r2, [r7, #0]
 800021c:	605a      	str	r2, [r3, #4]

}
 800021e:	bf00      	nop
 8000220:	3708      	adds	r7, #8
 8000222:	46bd      	mov	sp, r7
 8000224:	bd80      	pop	{r7, pc}

08000226 <delayRead>:

// función de comprobación/lectura del "delay"
bool_t delayRead( delay_t * delay ) {
 8000226:	b580      	push	{r7, lr}
 8000228:	b084      	sub	sp, #16
 800022a:	af00      	add	r7, sp, #0
 800022c:	6078      	str	r0, [r7, #4]

	bool_t ret = false;	// variable de retorno
 800022e:	2300      	movs	r3, #0
 8000230:	73fb      	strb	r3, [r7, #15]

	// control de errores en los parámetros

	if (delay == NULL)
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	2b00      	cmp	r3, #0
 8000236:	d101      	bne.n	800023c <delayRead+0x16>
		Error_Handler();
 8000238:	f7ff ffd8 	bl	80001ec <Error_Handler>

	if (delay->running==false) {
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	7a1b      	ldrb	r3, [r3, #8]
 8000240:	f083 0301 	eor.w	r3, r3, #1
 8000244:	b2db      	uxtb	r3, r3
 8000246:	2b00      	cmp	r3, #0
 8000248:	d008      	beq.n	800025c <delayRead+0x36>
		delay->startTime = HAL_GetTick();
 800024a:	f000 f9b5 	bl	80005b8 <HAL_GetTick>
 800024e:	4602      	mov	r2, r0
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	601a      	str	r2, [r3, #0]
		delay->running = true;
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	2201      	movs	r2, #1
 8000258:	721a      	strb	r2, [r3, #8]
 800025a:	e00e      	b.n	800027a <delayRead+0x54>

	} else {

		if ((HAL_GetTick() - delay->startTime) >= delay->duration) {
 800025c:	f000 f9ac 	bl	80005b8 <HAL_GetTick>
 8000260:	4602      	mov	r2, r0
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	681b      	ldr	r3, [r3, #0]
 8000266:	1ad2      	subs	r2, r2, r3
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	685b      	ldr	r3, [r3, #4]
 800026c:	429a      	cmp	r2, r3
 800026e:	d304      	bcc.n	800027a <delayRead+0x54>
			delay->running = false;
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	2200      	movs	r2, #0
 8000274:	721a      	strb	r2, [r3, #8]
			ret = true;
 8000276:	2301      	movs	r3, #1
 8000278:	73fb      	strb	r3, [r7, #15]
		}
	}

	return ret;
 800027a:	7bfb      	ldrb	r3, [r7, #15]
}
 800027c:	4618      	mov	r0, r3
 800027e:	3710      	adds	r7, #16
 8000280:	46bd      	mov	sp, r7
 8000282:	bd80      	pop	{r7, pc}

08000284 <BSP_LED_Init>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8000284:	b580      	push	{r7, lr}
 8000286:	b08a      	sub	sp, #40	; 0x28
 8000288:	af00      	add	r7, sp, #0
 800028a:	4603      	mov	r3, r0
 800028c:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 800028e:	79fb      	ldrb	r3, [r7, #7]
 8000290:	2b00      	cmp	r3, #0
 8000292:	d10e      	bne.n	80002b2 <BSP_LED_Init+0x2e>
 8000294:	2300      	movs	r3, #0
 8000296:	613b      	str	r3, [r7, #16]
 8000298:	4b1f      	ldr	r3, [pc, #124]	; (8000318 <BSP_LED_Init+0x94>)
 800029a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800029c:	4a1e      	ldr	r2, [pc, #120]	; (8000318 <BSP_LED_Init+0x94>)
 800029e:	f043 0302 	orr.w	r3, r3, #2
 80002a2:	6313      	str	r3, [r2, #48]	; 0x30
 80002a4:	4b1c      	ldr	r3, [pc, #112]	; (8000318 <BSP_LED_Init+0x94>)
 80002a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002a8:	f003 0302 	and.w	r3, r3, #2
 80002ac:	613b      	str	r3, [r7, #16]
 80002ae:	693b      	ldr	r3, [r7, #16]
 80002b0:	e00d      	b.n	80002ce <BSP_LED_Init+0x4a>
 80002b2:	2300      	movs	r3, #0
 80002b4:	60fb      	str	r3, [r7, #12]
 80002b6:	4b18      	ldr	r3, [pc, #96]	; (8000318 <BSP_LED_Init+0x94>)
 80002b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002ba:	4a17      	ldr	r2, [pc, #92]	; (8000318 <BSP_LED_Init+0x94>)
 80002bc:	f043 0302 	orr.w	r3, r3, #2
 80002c0:	6313      	str	r3, [r2, #48]	; 0x30
 80002c2:	4b15      	ldr	r3, [pc, #84]	; (8000318 <BSP_LED_Init+0x94>)
 80002c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002c6:	f003 0302 	and.w	r3, r3, #2
 80002ca:	60fb      	str	r3, [r7, #12]
 80002cc:	68fb      	ldr	r3, [r7, #12]
  
  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 80002ce:	79fb      	ldrb	r3, [r7, #7]
 80002d0:	4a12      	ldr	r2, [pc, #72]	; (800031c <BSP_LED_Init+0x98>)
 80002d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80002d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002d8:	2301      	movs	r3, #1
 80002da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002dc:	2300      	movs	r3, #0
 80002de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 80002e0:	2302      	movs	r3, #2
 80002e2:	623b      	str	r3, [r7, #32]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 80002e4:	79fb      	ldrb	r3, [r7, #7]
 80002e6:	4a0e      	ldr	r2, [pc, #56]	; (8000320 <BSP_LED_Init+0x9c>)
 80002e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002ec:	f107 0214 	add.w	r2, r7, #20
 80002f0:	4611      	mov	r1, r2
 80002f2:	4618      	mov	r0, r3
 80002f4:	f000 fa7e 	bl	80007f4 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 80002f8:	79fb      	ldrb	r3, [r7, #7]
 80002fa:	4a09      	ldr	r2, [pc, #36]	; (8000320 <BSP_LED_Init+0x9c>)
 80002fc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000300:	79fb      	ldrb	r3, [r7, #7]
 8000302:	4a06      	ldr	r2, [pc, #24]	; (800031c <BSP_LED_Init+0x98>)
 8000304:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000308:	2200      	movs	r2, #0
 800030a:	4619      	mov	r1, r3
 800030c:	f000 fc36 	bl	8000b7c <HAL_GPIO_WritePin>
}
 8000310:	bf00      	nop
 8000312:	3728      	adds	r7, #40	; 0x28
 8000314:	46bd      	mov	sp, r7
 8000316:	bd80      	pop	{r7, pc}
 8000318:	40023800 	.word	0x40023800
 800031c:	08000de8 	.word	0x08000de8
 8000320:	20000000 	.word	0x20000000

08000324 <BSP_LED_Toggle>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3 
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 8000324:	b580      	push	{r7, lr}
 8000326:	b082      	sub	sp, #8
 8000328:	af00      	add	r7, sp, #0
 800032a:	4603      	mov	r3, r0
 800032c:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 800032e:	79fb      	ldrb	r3, [r7, #7]
 8000330:	4a07      	ldr	r2, [pc, #28]	; (8000350 <BSP_LED_Toggle+0x2c>)
 8000332:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000336:	79fb      	ldrb	r3, [r7, #7]
 8000338:	4906      	ldr	r1, [pc, #24]	; (8000354 <BSP_LED_Toggle+0x30>)
 800033a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800033e:	4619      	mov	r1, r3
 8000340:	4610      	mov	r0, r2
 8000342:	f000 fc34 	bl	8000bae <HAL_GPIO_TogglePin>
}
 8000346:	bf00      	nop
 8000348:	3708      	adds	r7, #8
 800034a:	46bd      	mov	sp, r7
 800034c:	bd80      	pop	{r7, pc}
 800034e:	bf00      	nop
 8000350:	20000000 	.word	0x20000000
 8000354:	08000de8 	.word	0x08000de8

08000358 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_GPIO: Button will be used as simple IO 
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8000358:	b580      	push	{r7, lr}
 800035a:	b088      	sub	sp, #32
 800035c:	af00      	add	r7, sp, #0
 800035e:	4603      	mov	r3, r0
 8000360:	460a      	mov	r2, r1
 8000362:	71fb      	strb	r3, [r7, #7]
 8000364:	4613      	mov	r3, r2
 8000366:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef GPIO_InitStruct;
  
  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8000368:	2300      	movs	r3, #0
 800036a:	60bb      	str	r3, [r7, #8]
 800036c:	4b23      	ldr	r3, [pc, #140]	; (80003fc <BSP_PB_Init+0xa4>)
 800036e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000370:	4a22      	ldr	r2, [pc, #136]	; (80003fc <BSP_PB_Init+0xa4>)
 8000372:	f043 0304 	orr.w	r3, r3, #4
 8000376:	6313      	str	r3, [r2, #48]	; 0x30
 8000378:	4b20      	ldr	r3, [pc, #128]	; (80003fc <BSP_PB_Init+0xa4>)
 800037a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800037c:	f003 0304 	and.w	r3, r3, #4
 8000380:	60bb      	str	r3, [r7, #8]
 8000382:	68bb      	ldr	r3, [r7, #8]
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 8000384:	79bb      	ldrb	r3, [r7, #6]
 8000386:	2b00      	cmp	r3, #0
 8000388:	d112      	bne.n	80003b0 <BSP_PB_Init+0x58>
  {
    /* Configure Button pin as input */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 800038a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800038e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000390:	2300      	movs	r3, #0
 8000392:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000394:	2302      	movs	r3, #2
 8000396:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8000398:	2302      	movs	r3, #2
 800039a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 800039c:	79fb      	ldrb	r3, [r7, #7]
 800039e:	4a18      	ldr	r2, [pc, #96]	; (8000400 <BSP_PB_Init+0xa8>)
 80003a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80003a4:	f107 020c 	add.w	r2, r7, #12
 80003a8:	4611      	mov	r1, r2
 80003aa:	4618      	mov	r0, r3
 80003ac:	f000 fa22 	bl	80007f4 <HAL_GPIO_Init>
  }
  
  if(ButtonMode == BUTTON_MODE_EXTI)
 80003b0:	79bb      	ldrb	r3, [r7, #6]
 80003b2:	2b01      	cmp	r3, #1
 80003b4:	d11d      	bne.n	80003f2 <BSP_PB_Init+0x9a>
  {
    /* Configure Button pin as input with External interrupt */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 80003b6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80003ba:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003bc:	2300      	movs	r3, #0
 80003be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING; 
 80003c0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80003c4:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 80003c6:	79fb      	ldrb	r3, [r7, #7]
 80003c8:	4a0d      	ldr	r2, [pc, #52]	; (8000400 <BSP_PB_Init+0xa8>)
 80003ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80003ce:	f107 020c 	add.w	r2, r7, #12
 80003d2:	4611      	mov	r1, r2
 80003d4:	4618      	mov	r0, r3
 80003d6:	f000 fa0d 	bl	80007f4 <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 80003da:	2328      	movs	r3, #40	; 0x28
 80003dc:	b25b      	sxtb	r3, r3
 80003de:	2200      	movs	r2, #0
 80003e0:	210f      	movs	r1, #15
 80003e2:	4618      	mov	r0, r3
 80003e4:	f000 f9cf 	bl	8000786 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 80003e8:	2328      	movs	r3, #40	; 0x28
 80003ea:	b25b      	sxtb	r3, r3
 80003ec:	4618      	mov	r0, r3
 80003ee:	f000 f9e6 	bl	80007be <HAL_NVIC_EnableIRQ>
  }
}
 80003f2:	bf00      	nop
 80003f4:	3720      	adds	r7, #32
 80003f6:	46bd      	mov	sp, r7
 80003f8:	bd80      	pop	{r7, pc}
 80003fa:	bf00      	nop
 80003fc:	40023800 	.word	0x40023800
 8000400:	2000000c 	.word	0x2000000c

08000404 <BSP_PB_GetState>:
  * @param  Button: Specifies the Button to be checked.
  *   This parameter should be: BUTTON_USER  
  * @retval The Button GPIO pin value.
  */
uint32_t BSP_PB_GetState(Button_TypeDef Button)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	b082      	sub	sp, #8
 8000408:	af00      	add	r7, sp, #0
 800040a:	4603      	mov	r3, r0
 800040c:	71fb      	strb	r3, [r7, #7]
  return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 800040e:	79fb      	ldrb	r3, [r7, #7]
 8000410:	4a06      	ldr	r2, [pc, #24]	; (800042c <BSP_PB_GetState+0x28>)
 8000412:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000416:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800041a:	4611      	mov	r1, r2
 800041c:	4618      	mov	r0, r3
 800041e:	f000 fb95 	bl	8000b4c <HAL_GPIO_ReadPin>
 8000422:	4603      	mov	r3, r0
}
 8000424:	4618      	mov	r0, r3
 8000426:	3708      	adds	r7, #8
 8000428:	46bd      	mov	sp, r7
 800042a:	bd80      	pop	{r7, pc}
 800042c:	2000000c 	.word	0x2000000c

08000430 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000430:	b480      	push	{r7}
 8000432:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000434:	4b16      	ldr	r3, [pc, #88]	; (8000490 <SystemInit+0x60>)
 8000436:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800043a:	4a15      	ldr	r2, [pc, #84]	; (8000490 <SystemInit+0x60>)
 800043c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000440:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000444:	4b13      	ldr	r3, [pc, #76]	; (8000494 <SystemInit+0x64>)
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	4a12      	ldr	r2, [pc, #72]	; (8000494 <SystemInit+0x64>)
 800044a:	f043 0301 	orr.w	r3, r3, #1
 800044e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000450:	4b10      	ldr	r3, [pc, #64]	; (8000494 <SystemInit+0x64>)
 8000452:	2200      	movs	r2, #0
 8000454:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000456:	4b0f      	ldr	r3, [pc, #60]	; (8000494 <SystemInit+0x64>)
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	4a0e      	ldr	r2, [pc, #56]	; (8000494 <SystemInit+0x64>)
 800045c:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000460:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000464:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000466:	4b0b      	ldr	r3, [pc, #44]	; (8000494 <SystemInit+0x64>)
 8000468:	4a0b      	ldr	r2, [pc, #44]	; (8000498 <SystemInit+0x68>)
 800046a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800046c:	4b09      	ldr	r3, [pc, #36]	; (8000494 <SystemInit+0x64>)
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	4a08      	ldr	r2, [pc, #32]	; (8000494 <SystemInit+0x64>)
 8000472:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000476:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000478:	4b06      	ldr	r3, [pc, #24]	; (8000494 <SystemInit+0x64>)
 800047a:	2200      	movs	r2, #0
 800047c:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800047e:	4b04      	ldr	r3, [pc, #16]	; (8000490 <SystemInit+0x60>)
 8000480:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000484:	609a      	str	r2, [r3, #8]
#endif
}
 8000486:	bf00      	nop
 8000488:	46bd      	mov	sp, r7
 800048a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800048e:	4770      	bx	lr
 8000490:	e000ed00 	.word	0xe000ed00
 8000494:	40023800 	.word	0x40023800
 8000498:	24003010 	.word	0x24003010

0800049c <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 800049c:	b480      	push	{r7}
 800049e:	af00      	add	r7, sp, #0
}
 80004a0:	bf00      	nop
 80004a2:	46bd      	mov	sp, r7
 80004a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a8:	4770      	bx	lr

080004aa <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80004aa:	b480      	push	{r7}
 80004ac:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 80004ae:	e7fe      	b.n	80004ae <HardFault_Handler+0x4>

080004b0 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80004b0:	b480      	push	{r7}
 80004b2:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 80004b4:	e7fe      	b.n	80004b4 <MemManage_Handler+0x4>

080004b6 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80004b6:	b480      	push	{r7}
 80004b8:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 80004ba:	e7fe      	b.n	80004ba <BusFault_Handler+0x4>

080004bc <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80004bc:	b480      	push	{r7}
 80004be:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 80004c0:	e7fe      	b.n	80004c0 <UsageFault_Handler+0x4>

080004c2 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 80004c2:	b480      	push	{r7}
 80004c4:	af00      	add	r7, sp, #0
}
 80004c6:	bf00      	nop
 80004c8:	46bd      	mov	sp, r7
 80004ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ce:	4770      	bx	lr

080004d0 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 80004d0:	b480      	push	{r7}
 80004d2:	af00      	add	r7, sp, #0
}
 80004d4:	bf00      	nop
 80004d6:	46bd      	mov	sp, r7
 80004d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004dc:	4770      	bx	lr

080004de <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 80004de:	b480      	push	{r7}
 80004e0:	af00      	add	r7, sp, #0
}
 80004e2:	bf00      	nop
 80004e4:	46bd      	mov	sp, r7
 80004e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ea:	4770      	bx	lr

080004ec <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0
    HAL_IncTick();
 80004f0:	f000 f84e 	bl	8000590 <HAL_IncTick>
}
 80004f4:	bf00      	nop
 80004f6:	bd80      	pop	{r7, pc}

080004f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80004fc:	4b0b      	ldr	r3, [pc, #44]	; (800052c <HAL_Init+0x34>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	4a0a      	ldr	r2, [pc, #40]	; (800052c <HAL_Init+0x34>)
 8000502:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000506:	6013      	str	r3, [r2, #0]
#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000508:	4b08      	ldr	r3, [pc, #32]	; (800052c <HAL_Init+0x34>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	4a07      	ldr	r2, [pc, #28]	; (800052c <HAL_Init+0x34>)
 800050e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000512:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000514:	2003      	movs	r0, #3
 8000516:	f000 f92b 	bl	8000770 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800051a:	200f      	movs	r0, #15
 800051c:	f000 f808 	bl	8000530 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000520:	f000 fb5f 	bl	8000be2 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000524:	2300      	movs	r3, #0
}
 8000526:	4618      	mov	r0, r3
 8000528:	bd80      	pop	{r7, pc}
 800052a:	bf00      	nop
 800052c:	40023c00 	.word	0x40023c00

08000530 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b082      	sub	sp, #8
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000538:	4b12      	ldr	r3, [pc, #72]	; (8000584 <HAL_InitTick+0x54>)
 800053a:	681a      	ldr	r2, [r3, #0]
 800053c:	4b12      	ldr	r3, [pc, #72]	; (8000588 <HAL_InitTick+0x58>)
 800053e:	781b      	ldrb	r3, [r3, #0]
 8000540:	4619      	mov	r1, r3
 8000542:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000546:	fbb3 f3f1 	udiv	r3, r3, r1
 800054a:	fbb2 f3f3 	udiv	r3, r2, r3
 800054e:	4618      	mov	r0, r3
 8000550:	f000 f943 	bl	80007da <HAL_SYSTICK_Config>
 8000554:	4603      	mov	r3, r0
 8000556:	2b00      	cmp	r3, #0
 8000558:	d001      	beq.n	800055e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800055a:	2301      	movs	r3, #1
 800055c:	e00e      	b.n	800057c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	2b0f      	cmp	r3, #15
 8000562:	d80a      	bhi.n	800057a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000564:	2200      	movs	r2, #0
 8000566:	6879      	ldr	r1, [r7, #4]
 8000568:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800056c:	f000 f90b 	bl	8000786 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000570:	4a06      	ldr	r2, [pc, #24]	; (800058c <HAL_InitTick+0x5c>)
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000576:	2300      	movs	r3, #0
 8000578:	e000      	b.n	800057c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800057a:	2301      	movs	r3, #1
}
 800057c:	4618      	mov	r0, r3
 800057e:	3708      	adds	r7, #8
 8000580:	46bd      	mov	sp, r7
 8000582:	bd80      	pop	{r7, pc}
 8000584:	20000010 	.word	0x20000010
 8000588:	20000018 	.word	0x20000018
 800058c:	20000014 	.word	0x20000014

08000590 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000590:	b480      	push	{r7}
 8000592:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000594:	4b06      	ldr	r3, [pc, #24]	; (80005b0 <HAL_IncTick+0x20>)
 8000596:	781b      	ldrb	r3, [r3, #0]
 8000598:	461a      	mov	r2, r3
 800059a:	4b06      	ldr	r3, [pc, #24]	; (80005b4 <HAL_IncTick+0x24>)
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	4413      	add	r3, r2
 80005a0:	4a04      	ldr	r2, [pc, #16]	; (80005b4 <HAL_IncTick+0x24>)
 80005a2:	6013      	str	r3, [r2, #0]
}
 80005a4:	bf00      	nop
 80005a6:	46bd      	mov	sp, r7
 80005a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop
 80005b0:	20000018 	.word	0x20000018
 80005b4:	20000038 	.word	0x20000038

080005b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005b8:	b480      	push	{r7}
 80005ba:	af00      	add	r7, sp, #0
  return uwTick;
 80005bc:	4b03      	ldr	r3, [pc, #12]	; (80005cc <HAL_GetTick+0x14>)
 80005be:	681b      	ldr	r3, [r3, #0]
}
 80005c0:	4618      	mov	r0, r3
 80005c2:	46bd      	mov	sp, r7
 80005c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop
 80005cc:	20000038 	.word	0x20000038

080005d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005d0:	b480      	push	{r7}
 80005d2:	b085      	sub	sp, #20
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	f003 0307 	and.w	r3, r3, #7
 80005de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005e0:	4b0c      	ldr	r3, [pc, #48]	; (8000614 <__NVIC_SetPriorityGrouping+0x44>)
 80005e2:	68db      	ldr	r3, [r3, #12]
 80005e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005e6:	68ba      	ldr	r2, [r7, #8]
 80005e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80005ec:	4013      	ands	r3, r2
 80005ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80005f0:	68fb      	ldr	r3, [r7, #12]
 80005f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80005f4:	68bb      	ldr	r3, [r7, #8]
 80005f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80005f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80005fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000600:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000602:	4a04      	ldr	r2, [pc, #16]	; (8000614 <__NVIC_SetPriorityGrouping+0x44>)
 8000604:	68bb      	ldr	r3, [r7, #8]
 8000606:	60d3      	str	r3, [r2, #12]
}
 8000608:	bf00      	nop
 800060a:	3714      	adds	r7, #20
 800060c:	46bd      	mov	sp, r7
 800060e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000612:	4770      	bx	lr
 8000614:	e000ed00 	.word	0xe000ed00

08000618 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000618:	b480      	push	{r7}
 800061a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800061c:	4b04      	ldr	r3, [pc, #16]	; (8000630 <__NVIC_GetPriorityGrouping+0x18>)
 800061e:	68db      	ldr	r3, [r3, #12]
 8000620:	0a1b      	lsrs	r3, r3, #8
 8000622:	f003 0307 	and.w	r3, r3, #7
}
 8000626:	4618      	mov	r0, r3
 8000628:	46bd      	mov	sp, r7
 800062a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062e:	4770      	bx	lr
 8000630:	e000ed00 	.word	0xe000ed00

08000634 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000634:	b480      	push	{r7}
 8000636:	b083      	sub	sp, #12
 8000638:	af00      	add	r7, sp, #0
 800063a:	4603      	mov	r3, r0
 800063c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800063e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000642:	2b00      	cmp	r3, #0
 8000644:	db0b      	blt.n	800065e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000646:	79fb      	ldrb	r3, [r7, #7]
 8000648:	f003 021f 	and.w	r2, r3, #31
 800064c:	4907      	ldr	r1, [pc, #28]	; (800066c <__NVIC_EnableIRQ+0x38>)
 800064e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000652:	095b      	lsrs	r3, r3, #5
 8000654:	2001      	movs	r0, #1
 8000656:	fa00 f202 	lsl.w	r2, r0, r2
 800065a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800065e:	bf00      	nop
 8000660:	370c      	adds	r7, #12
 8000662:	46bd      	mov	sp, r7
 8000664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000668:	4770      	bx	lr
 800066a:	bf00      	nop
 800066c:	e000e100 	.word	0xe000e100

08000670 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000670:	b480      	push	{r7}
 8000672:	b083      	sub	sp, #12
 8000674:	af00      	add	r7, sp, #0
 8000676:	4603      	mov	r3, r0
 8000678:	6039      	str	r1, [r7, #0]
 800067a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800067c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000680:	2b00      	cmp	r3, #0
 8000682:	db0a      	blt.n	800069a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000684:	683b      	ldr	r3, [r7, #0]
 8000686:	b2da      	uxtb	r2, r3
 8000688:	490c      	ldr	r1, [pc, #48]	; (80006bc <__NVIC_SetPriority+0x4c>)
 800068a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800068e:	0112      	lsls	r2, r2, #4
 8000690:	b2d2      	uxtb	r2, r2
 8000692:	440b      	add	r3, r1
 8000694:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000698:	e00a      	b.n	80006b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800069a:	683b      	ldr	r3, [r7, #0]
 800069c:	b2da      	uxtb	r2, r3
 800069e:	4908      	ldr	r1, [pc, #32]	; (80006c0 <__NVIC_SetPriority+0x50>)
 80006a0:	79fb      	ldrb	r3, [r7, #7]
 80006a2:	f003 030f 	and.w	r3, r3, #15
 80006a6:	3b04      	subs	r3, #4
 80006a8:	0112      	lsls	r2, r2, #4
 80006aa:	b2d2      	uxtb	r2, r2
 80006ac:	440b      	add	r3, r1
 80006ae:	761a      	strb	r2, [r3, #24]
}
 80006b0:	bf00      	nop
 80006b2:	370c      	adds	r7, #12
 80006b4:	46bd      	mov	sp, r7
 80006b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ba:	4770      	bx	lr
 80006bc:	e000e100 	.word	0xe000e100
 80006c0:	e000ed00 	.word	0xe000ed00

080006c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006c4:	b480      	push	{r7}
 80006c6:	b089      	sub	sp, #36	; 0x24
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	60f8      	str	r0, [r7, #12]
 80006cc:	60b9      	str	r1, [r7, #8]
 80006ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006d0:	68fb      	ldr	r3, [r7, #12]
 80006d2:	f003 0307 	and.w	r3, r3, #7
 80006d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006d8:	69fb      	ldr	r3, [r7, #28]
 80006da:	f1c3 0307 	rsb	r3, r3, #7
 80006de:	2b04      	cmp	r3, #4
 80006e0:	bf28      	it	cs
 80006e2:	2304      	movcs	r3, #4
 80006e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006e6:	69fb      	ldr	r3, [r7, #28]
 80006e8:	3304      	adds	r3, #4
 80006ea:	2b06      	cmp	r3, #6
 80006ec:	d902      	bls.n	80006f4 <NVIC_EncodePriority+0x30>
 80006ee:	69fb      	ldr	r3, [r7, #28]
 80006f0:	3b03      	subs	r3, #3
 80006f2:	e000      	b.n	80006f6 <NVIC_EncodePriority+0x32>
 80006f4:	2300      	movs	r3, #0
 80006f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80006fc:	69bb      	ldr	r3, [r7, #24]
 80006fe:	fa02 f303 	lsl.w	r3, r2, r3
 8000702:	43da      	mvns	r2, r3
 8000704:	68bb      	ldr	r3, [r7, #8]
 8000706:	401a      	ands	r2, r3
 8000708:	697b      	ldr	r3, [r7, #20]
 800070a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800070c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000710:	697b      	ldr	r3, [r7, #20]
 8000712:	fa01 f303 	lsl.w	r3, r1, r3
 8000716:	43d9      	mvns	r1, r3
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800071c:	4313      	orrs	r3, r2
         );
}
 800071e:	4618      	mov	r0, r3
 8000720:	3724      	adds	r7, #36	; 0x24
 8000722:	46bd      	mov	sp, r7
 8000724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000728:	4770      	bx	lr
	...

0800072c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b082      	sub	sp, #8
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	3b01      	subs	r3, #1
 8000738:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800073c:	d301      	bcc.n	8000742 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800073e:	2301      	movs	r3, #1
 8000740:	e00f      	b.n	8000762 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000742:	4a0a      	ldr	r2, [pc, #40]	; (800076c <SysTick_Config+0x40>)
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	3b01      	subs	r3, #1
 8000748:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800074a:	210f      	movs	r1, #15
 800074c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000750:	f7ff ff8e 	bl	8000670 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000754:	4b05      	ldr	r3, [pc, #20]	; (800076c <SysTick_Config+0x40>)
 8000756:	2200      	movs	r2, #0
 8000758:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800075a:	4b04      	ldr	r3, [pc, #16]	; (800076c <SysTick_Config+0x40>)
 800075c:	2207      	movs	r2, #7
 800075e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000760:	2300      	movs	r3, #0
}
 8000762:	4618      	mov	r0, r3
 8000764:	3708      	adds	r7, #8
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	e000e010 	.word	0xe000e010

08000770 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b082      	sub	sp, #8
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000778:	6878      	ldr	r0, [r7, #4]
 800077a:	f7ff ff29 	bl	80005d0 <__NVIC_SetPriorityGrouping>
}
 800077e:	bf00      	nop
 8000780:	3708      	adds	r7, #8
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}

08000786 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000786:	b580      	push	{r7, lr}
 8000788:	b086      	sub	sp, #24
 800078a:	af00      	add	r7, sp, #0
 800078c:	4603      	mov	r3, r0
 800078e:	60b9      	str	r1, [r7, #8]
 8000790:	607a      	str	r2, [r7, #4]
 8000792:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000794:	2300      	movs	r3, #0
 8000796:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000798:	f7ff ff3e 	bl	8000618 <__NVIC_GetPriorityGrouping>
 800079c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800079e:	687a      	ldr	r2, [r7, #4]
 80007a0:	68b9      	ldr	r1, [r7, #8]
 80007a2:	6978      	ldr	r0, [r7, #20]
 80007a4:	f7ff ff8e 	bl	80006c4 <NVIC_EncodePriority>
 80007a8:	4602      	mov	r2, r0
 80007aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007ae:	4611      	mov	r1, r2
 80007b0:	4618      	mov	r0, r3
 80007b2:	f7ff ff5d 	bl	8000670 <__NVIC_SetPriority>
}
 80007b6:	bf00      	nop
 80007b8:	3718      	adds	r7, #24
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}

080007be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007be:	b580      	push	{r7, lr}
 80007c0:	b082      	sub	sp, #8
 80007c2:	af00      	add	r7, sp, #0
 80007c4:	4603      	mov	r3, r0
 80007c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80007c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007cc:	4618      	mov	r0, r3
 80007ce:	f7ff ff31 	bl	8000634 <__NVIC_EnableIRQ>
}
 80007d2:	bf00      	nop
 80007d4:	3708      	adds	r7, #8
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}

080007da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007da:	b580      	push	{r7, lr}
 80007dc:	b082      	sub	sp, #8
 80007de:	af00      	add	r7, sp, #0
 80007e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007e2:	6878      	ldr	r0, [r7, #4]
 80007e4:	f7ff ffa2 	bl	800072c <SysTick_Config>
 80007e8:	4603      	mov	r3, r0
}
 80007ea:	4618      	mov	r0, r3
 80007ec:	3708      	adds	r7, #8
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
	...

080007f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80007f4:	b480      	push	{r7}
 80007f6:	b089      	sub	sp, #36	; 0x24
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
 80007fc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80007fe:	2300      	movs	r3, #0
 8000800:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000802:	2300      	movs	r3, #0
 8000804:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000806:	2300      	movs	r3, #0
 8000808:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800080a:	2300      	movs	r3, #0
 800080c:	61fb      	str	r3, [r7, #28]
 800080e:	e177      	b.n	8000b00 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000810:	2201      	movs	r2, #1
 8000812:	69fb      	ldr	r3, [r7, #28]
 8000814:	fa02 f303 	lsl.w	r3, r2, r3
 8000818:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800081a:	683b      	ldr	r3, [r7, #0]
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	697a      	ldr	r2, [r7, #20]
 8000820:	4013      	ands	r3, r2
 8000822:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000824:	693a      	ldr	r2, [r7, #16]
 8000826:	697b      	ldr	r3, [r7, #20]
 8000828:	429a      	cmp	r2, r3
 800082a:	f040 8166 	bne.w	8000afa <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800082e:	683b      	ldr	r3, [r7, #0]
 8000830:	685b      	ldr	r3, [r3, #4]
 8000832:	f003 0303 	and.w	r3, r3, #3
 8000836:	2b01      	cmp	r3, #1
 8000838:	d005      	beq.n	8000846 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800083a:	683b      	ldr	r3, [r7, #0]
 800083c:	685b      	ldr	r3, [r3, #4]
 800083e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000842:	2b02      	cmp	r3, #2
 8000844:	d130      	bne.n	80008a8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	689b      	ldr	r3, [r3, #8]
 800084a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800084c:	69fb      	ldr	r3, [r7, #28]
 800084e:	005b      	lsls	r3, r3, #1
 8000850:	2203      	movs	r2, #3
 8000852:	fa02 f303 	lsl.w	r3, r2, r3
 8000856:	43db      	mvns	r3, r3
 8000858:	69ba      	ldr	r2, [r7, #24]
 800085a:	4013      	ands	r3, r2
 800085c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800085e:	683b      	ldr	r3, [r7, #0]
 8000860:	68da      	ldr	r2, [r3, #12]
 8000862:	69fb      	ldr	r3, [r7, #28]
 8000864:	005b      	lsls	r3, r3, #1
 8000866:	fa02 f303 	lsl.w	r3, r2, r3
 800086a:	69ba      	ldr	r2, [r7, #24]
 800086c:	4313      	orrs	r3, r2
 800086e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	69ba      	ldr	r2, [r7, #24]
 8000874:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	685b      	ldr	r3, [r3, #4]
 800087a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800087c:	2201      	movs	r2, #1
 800087e:	69fb      	ldr	r3, [r7, #28]
 8000880:	fa02 f303 	lsl.w	r3, r2, r3
 8000884:	43db      	mvns	r3, r3
 8000886:	69ba      	ldr	r2, [r7, #24]
 8000888:	4013      	ands	r3, r2
 800088a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800088c:	683b      	ldr	r3, [r7, #0]
 800088e:	685b      	ldr	r3, [r3, #4]
 8000890:	091b      	lsrs	r3, r3, #4
 8000892:	f003 0201 	and.w	r2, r3, #1
 8000896:	69fb      	ldr	r3, [r7, #28]
 8000898:	fa02 f303 	lsl.w	r3, r2, r3
 800089c:	69ba      	ldr	r2, [r7, #24]
 800089e:	4313      	orrs	r3, r2
 80008a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	69ba      	ldr	r2, [r7, #24]
 80008a6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80008a8:	683b      	ldr	r3, [r7, #0]
 80008aa:	685b      	ldr	r3, [r3, #4]
 80008ac:	f003 0303 	and.w	r3, r3, #3
 80008b0:	2b03      	cmp	r3, #3
 80008b2:	d017      	beq.n	80008e4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	68db      	ldr	r3, [r3, #12]
 80008b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80008ba:	69fb      	ldr	r3, [r7, #28]
 80008bc:	005b      	lsls	r3, r3, #1
 80008be:	2203      	movs	r2, #3
 80008c0:	fa02 f303 	lsl.w	r3, r2, r3
 80008c4:	43db      	mvns	r3, r3
 80008c6:	69ba      	ldr	r2, [r7, #24]
 80008c8:	4013      	ands	r3, r2
 80008ca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80008cc:	683b      	ldr	r3, [r7, #0]
 80008ce:	689a      	ldr	r2, [r3, #8]
 80008d0:	69fb      	ldr	r3, [r7, #28]
 80008d2:	005b      	lsls	r3, r3, #1
 80008d4:	fa02 f303 	lsl.w	r3, r2, r3
 80008d8:	69ba      	ldr	r2, [r7, #24]
 80008da:	4313      	orrs	r3, r2
 80008dc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	69ba      	ldr	r2, [r7, #24]
 80008e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80008e4:	683b      	ldr	r3, [r7, #0]
 80008e6:	685b      	ldr	r3, [r3, #4]
 80008e8:	f003 0303 	and.w	r3, r3, #3
 80008ec:	2b02      	cmp	r3, #2
 80008ee:	d123      	bne.n	8000938 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80008f0:	69fb      	ldr	r3, [r7, #28]
 80008f2:	08da      	lsrs	r2, r3, #3
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	3208      	adds	r2, #8
 80008f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80008fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80008fe:	69fb      	ldr	r3, [r7, #28]
 8000900:	f003 0307 	and.w	r3, r3, #7
 8000904:	009b      	lsls	r3, r3, #2
 8000906:	220f      	movs	r2, #15
 8000908:	fa02 f303 	lsl.w	r3, r2, r3
 800090c:	43db      	mvns	r3, r3
 800090e:	69ba      	ldr	r2, [r7, #24]
 8000910:	4013      	ands	r3, r2
 8000912:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000914:	683b      	ldr	r3, [r7, #0]
 8000916:	691a      	ldr	r2, [r3, #16]
 8000918:	69fb      	ldr	r3, [r7, #28]
 800091a:	f003 0307 	and.w	r3, r3, #7
 800091e:	009b      	lsls	r3, r3, #2
 8000920:	fa02 f303 	lsl.w	r3, r2, r3
 8000924:	69ba      	ldr	r2, [r7, #24]
 8000926:	4313      	orrs	r3, r2
 8000928:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800092a:	69fb      	ldr	r3, [r7, #28]
 800092c:	08da      	lsrs	r2, r3, #3
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	3208      	adds	r2, #8
 8000932:	69b9      	ldr	r1, [r7, #24]
 8000934:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800093e:	69fb      	ldr	r3, [r7, #28]
 8000940:	005b      	lsls	r3, r3, #1
 8000942:	2203      	movs	r2, #3
 8000944:	fa02 f303 	lsl.w	r3, r2, r3
 8000948:	43db      	mvns	r3, r3
 800094a:	69ba      	ldr	r2, [r7, #24]
 800094c:	4013      	ands	r3, r2
 800094e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000950:	683b      	ldr	r3, [r7, #0]
 8000952:	685b      	ldr	r3, [r3, #4]
 8000954:	f003 0203 	and.w	r2, r3, #3
 8000958:	69fb      	ldr	r3, [r7, #28]
 800095a:	005b      	lsls	r3, r3, #1
 800095c:	fa02 f303 	lsl.w	r3, r2, r3
 8000960:	69ba      	ldr	r2, [r7, #24]
 8000962:	4313      	orrs	r3, r2
 8000964:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	69ba      	ldr	r2, [r7, #24]
 800096a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800096c:	683b      	ldr	r3, [r7, #0]
 800096e:	685b      	ldr	r3, [r3, #4]
 8000970:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000974:	2b00      	cmp	r3, #0
 8000976:	f000 80c0 	beq.w	8000afa <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800097a:	2300      	movs	r3, #0
 800097c:	60fb      	str	r3, [r7, #12]
 800097e:	4b66      	ldr	r3, [pc, #408]	; (8000b18 <HAL_GPIO_Init+0x324>)
 8000980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000982:	4a65      	ldr	r2, [pc, #404]	; (8000b18 <HAL_GPIO_Init+0x324>)
 8000984:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000988:	6453      	str	r3, [r2, #68]	; 0x44
 800098a:	4b63      	ldr	r3, [pc, #396]	; (8000b18 <HAL_GPIO_Init+0x324>)
 800098c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800098e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000992:	60fb      	str	r3, [r7, #12]
 8000994:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000996:	4a61      	ldr	r2, [pc, #388]	; (8000b1c <HAL_GPIO_Init+0x328>)
 8000998:	69fb      	ldr	r3, [r7, #28]
 800099a:	089b      	lsrs	r3, r3, #2
 800099c:	3302      	adds	r3, #2
 800099e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80009a4:	69fb      	ldr	r3, [r7, #28]
 80009a6:	f003 0303 	and.w	r3, r3, #3
 80009aa:	009b      	lsls	r3, r3, #2
 80009ac:	220f      	movs	r2, #15
 80009ae:	fa02 f303 	lsl.w	r3, r2, r3
 80009b2:	43db      	mvns	r3, r3
 80009b4:	69ba      	ldr	r2, [r7, #24]
 80009b6:	4013      	ands	r3, r2
 80009b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	4a58      	ldr	r2, [pc, #352]	; (8000b20 <HAL_GPIO_Init+0x32c>)
 80009be:	4293      	cmp	r3, r2
 80009c0:	d037      	beq.n	8000a32 <HAL_GPIO_Init+0x23e>
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	4a57      	ldr	r2, [pc, #348]	; (8000b24 <HAL_GPIO_Init+0x330>)
 80009c6:	4293      	cmp	r3, r2
 80009c8:	d031      	beq.n	8000a2e <HAL_GPIO_Init+0x23a>
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	4a56      	ldr	r2, [pc, #344]	; (8000b28 <HAL_GPIO_Init+0x334>)
 80009ce:	4293      	cmp	r3, r2
 80009d0:	d02b      	beq.n	8000a2a <HAL_GPIO_Init+0x236>
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	4a55      	ldr	r2, [pc, #340]	; (8000b2c <HAL_GPIO_Init+0x338>)
 80009d6:	4293      	cmp	r3, r2
 80009d8:	d025      	beq.n	8000a26 <HAL_GPIO_Init+0x232>
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	4a54      	ldr	r2, [pc, #336]	; (8000b30 <HAL_GPIO_Init+0x33c>)
 80009de:	4293      	cmp	r3, r2
 80009e0:	d01f      	beq.n	8000a22 <HAL_GPIO_Init+0x22e>
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	4a53      	ldr	r2, [pc, #332]	; (8000b34 <HAL_GPIO_Init+0x340>)
 80009e6:	4293      	cmp	r3, r2
 80009e8:	d019      	beq.n	8000a1e <HAL_GPIO_Init+0x22a>
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	4a52      	ldr	r2, [pc, #328]	; (8000b38 <HAL_GPIO_Init+0x344>)
 80009ee:	4293      	cmp	r3, r2
 80009f0:	d013      	beq.n	8000a1a <HAL_GPIO_Init+0x226>
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	4a51      	ldr	r2, [pc, #324]	; (8000b3c <HAL_GPIO_Init+0x348>)
 80009f6:	4293      	cmp	r3, r2
 80009f8:	d00d      	beq.n	8000a16 <HAL_GPIO_Init+0x222>
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	4a50      	ldr	r2, [pc, #320]	; (8000b40 <HAL_GPIO_Init+0x34c>)
 80009fe:	4293      	cmp	r3, r2
 8000a00:	d007      	beq.n	8000a12 <HAL_GPIO_Init+0x21e>
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	4a4f      	ldr	r2, [pc, #316]	; (8000b44 <HAL_GPIO_Init+0x350>)
 8000a06:	4293      	cmp	r3, r2
 8000a08:	d101      	bne.n	8000a0e <HAL_GPIO_Init+0x21a>
 8000a0a:	2309      	movs	r3, #9
 8000a0c:	e012      	b.n	8000a34 <HAL_GPIO_Init+0x240>
 8000a0e:	230a      	movs	r3, #10
 8000a10:	e010      	b.n	8000a34 <HAL_GPIO_Init+0x240>
 8000a12:	2308      	movs	r3, #8
 8000a14:	e00e      	b.n	8000a34 <HAL_GPIO_Init+0x240>
 8000a16:	2307      	movs	r3, #7
 8000a18:	e00c      	b.n	8000a34 <HAL_GPIO_Init+0x240>
 8000a1a:	2306      	movs	r3, #6
 8000a1c:	e00a      	b.n	8000a34 <HAL_GPIO_Init+0x240>
 8000a1e:	2305      	movs	r3, #5
 8000a20:	e008      	b.n	8000a34 <HAL_GPIO_Init+0x240>
 8000a22:	2304      	movs	r3, #4
 8000a24:	e006      	b.n	8000a34 <HAL_GPIO_Init+0x240>
 8000a26:	2303      	movs	r3, #3
 8000a28:	e004      	b.n	8000a34 <HAL_GPIO_Init+0x240>
 8000a2a:	2302      	movs	r3, #2
 8000a2c:	e002      	b.n	8000a34 <HAL_GPIO_Init+0x240>
 8000a2e:	2301      	movs	r3, #1
 8000a30:	e000      	b.n	8000a34 <HAL_GPIO_Init+0x240>
 8000a32:	2300      	movs	r3, #0
 8000a34:	69fa      	ldr	r2, [r7, #28]
 8000a36:	f002 0203 	and.w	r2, r2, #3
 8000a3a:	0092      	lsls	r2, r2, #2
 8000a3c:	4093      	lsls	r3, r2
 8000a3e:	69ba      	ldr	r2, [r7, #24]
 8000a40:	4313      	orrs	r3, r2
 8000a42:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000a44:	4935      	ldr	r1, [pc, #212]	; (8000b1c <HAL_GPIO_Init+0x328>)
 8000a46:	69fb      	ldr	r3, [r7, #28]
 8000a48:	089b      	lsrs	r3, r3, #2
 8000a4a:	3302      	adds	r3, #2
 8000a4c:	69ba      	ldr	r2, [r7, #24]
 8000a4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000a52:	4b3d      	ldr	r3, [pc, #244]	; (8000b48 <HAL_GPIO_Init+0x354>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a58:	693b      	ldr	r3, [r7, #16]
 8000a5a:	43db      	mvns	r3, r3
 8000a5c:	69ba      	ldr	r2, [r7, #24]
 8000a5e:	4013      	ands	r3, r2
 8000a60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000a62:	683b      	ldr	r3, [r7, #0]
 8000a64:	685b      	ldr	r3, [r3, #4]
 8000a66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d003      	beq.n	8000a76 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000a6e:	69ba      	ldr	r2, [r7, #24]
 8000a70:	693b      	ldr	r3, [r7, #16]
 8000a72:	4313      	orrs	r3, r2
 8000a74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000a76:	4a34      	ldr	r2, [pc, #208]	; (8000b48 <HAL_GPIO_Init+0x354>)
 8000a78:	69bb      	ldr	r3, [r7, #24]
 8000a7a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000a7c:	4b32      	ldr	r3, [pc, #200]	; (8000b48 <HAL_GPIO_Init+0x354>)
 8000a7e:	685b      	ldr	r3, [r3, #4]
 8000a80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a82:	693b      	ldr	r3, [r7, #16]
 8000a84:	43db      	mvns	r3, r3
 8000a86:	69ba      	ldr	r2, [r7, #24]
 8000a88:	4013      	ands	r3, r2
 8000a8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000a8c:	683b      	ldr	r3, [r7, #0]
 8000a8e:	685b      	ldr	r3, [r3, #4]
 8000a90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d003      	beq.n	8000aa0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000a98:	69ba      	ldr	r2, [r7, #24]
 8000a9a:	693b      	ldr	r3, [r7, #16]
 8000a9c:	4313      	orrs	r3, r2
 8000a9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000aa0:	4a29      	ldr	r2, [pc, #164]	; (8000b48 <HAL_GPIO_Init+0x354>)
 8000aa2:	69bb      	ldr	r3, [r7, #24]
 8000aa4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000aa6:	4b28      	ldr	r3, [pc, #160]	; (8000b48 <HAL_GPIO_Init+0x354>)
 8000aa8:	689b      	ldr	r3, [r3, #8]
 8000aaa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000aac:	693b      	ldr	r3, [r7, #16]
 8000aae:	43db      	mvns	r3, r3
 8000ab0:	69ba      	ldr	r2, [r7, #24]
 8000ab2:	4013      	ands	r3, r2
 8000ab4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000ab6:	683b      	ldr	r3, [r7, #0]
 8000ab8:	685b      	ldr	r3, [r3, #4]
 8000aba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d003      	beq.n	8000aca <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000ac2:	69ba      	ldr	r2, [r7, #24]
 8000ac4:	693b      	ldr	r3, [r7, #16]
 8000ac6:	4313      	orrs	r3, r2
 8000ac8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000aca:	4a1f      	ldr	r2, [pc, #124]	; (8000b48 <HAL_GPIO_Init+0x354>)
 8000acc:	69bb      	ldr	r3, [r7, #24]
 8000ace:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ad0:	4b1d      	ldr	r3, [pc, #116]	; (8000b48 <HAL_GPIO_Init+0x354>)
 8000ad2:	68db      	ldr	r3, [r3, #12]
 8000ad4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ad6:	693b      	ldr	r3, [r7, #16]
 8000ad8:	43db      	mvns	r3, r3
 8000ada:	69ba      	ldr	r2, [r7, #24]
 8000adc:	4013      	ands	r3, r2
 8000ade:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000ae0:	683b      	ldr	r3, [r7, #0]
 8000ae2:	685b      	ldr	r3, [r3, #4]
 8000ae4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d003      	beq.n	8000af4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8000aec:	69ba      	ldr	r2, [r7, #24]
 8000aee:	693b      	ldr	r3, [r7, #16]
 8000af0:	4313      	orrs	r3, r2
 8000af2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000af4:	4a14      	ldr	r2, [pc, #80]	; (8000b48 <HAL_GPIO_Init+0x354>)
 8000af6:	69bb      	ldr	r3, [r7, #24]
 8000af8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000afa:	69fb      	ldr	r3, [r7, #28]
 8000afc:	3301      	adds	r3, #1
 8000afe:	61fb      	str	r3, [r7, #28]
 8000b00:	69fb      	ldr	r3, [r7, #28]
 8000b02:	2b0f      	cmp	r3, #15
 8000b04:	f67f ae84 	bls.w	8000810 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000b08:	bf00      	nop
 8000b0a:	bf00      	nop
 8000b0c:	3724      	adds	r7, #36	; 0x24
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop
 8000b18:	40023800 	.word	0x40023800
 8000b1c:	40013800 	.word	0x40013800
 8000b20:	40020000 	.word	0x40020000
 8000b24:	40020400 	.word	0x40020400
 8000b28:	40020800 	.word	0x40020800
 8000b2c:	40020c00 	.word	0x40020c00
 8000b30:	40021000 	.word	0x40021000
 8000b34:	40021400 	.word	0x40021400
 8000b38:	40021800 	.word	0x40021800
 8000b3c:	40021c00 	.word	0x40021c00
 8000b40:	40022000 	.word	0x40022000
 8000b44:	40022400 	.word	0x40022400
 8000b48:	40013c00 	.word	0x40013c00

08000b4c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b085      	sub	sp, #20
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
 8000b54:	460b      	mov	r3, r1
 8000b56:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	691a      	ldr	r2, [r3, #16]
 8000b5c:	887b      	ldrh	r3, [r7, #2]
 8000b5e:	4013      	ands	r3, r2
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d002      	beq.n	8000b6a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000b64:	2301      	movs	r3, #1
 8000b66:	73fb      	strb	r3, [r7, #15]
 8000b68:	e001      	b.n	8000b6e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000b6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b70:	4618      	mov	r0, r3
 8000b72:	3714      	adds	r7, #20
 8000b74:	46bd      	mov	sp, r7
 8000b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7a:	4770      	bx	lr

08000b7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	b083      	sub	sp, #12
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
 8000b84:	460b      	mov	r3, r1
 8000b86:	807b      	strh	r3, [r7, #2]
 8000b88:	4613      	mov	r3, r2
 8000b8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000b8c:	787b      	ldrb	r3, [r7, #1]
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d003      	beq.n	8000b9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000b92:	887a      	ldrh	r2, [r7, #2]
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000b98:	e003      	b.n	8000ba2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000b9a:	887b      	ldrh	r3, [r7, #2]
 8000b9c:	041a      	lsls	r2, r3, #16
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	619a      	str	r2, [r3, #24]
}
 8000ba2:	bf00      	nop
 8000ba4:	370c      	adds	r7, #12
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr

08000bae <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000bae:	b480      	push	{r7}
 8000bb0:	b085      	sub	sp, #20
 8000bb2:	af00      	add	r7, sp, #0
 8000bb4:	6078      	str	r0, [r7, #4]
 8000bb6:	460b      	mov	r3, r1
 8000bb8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	695b      	ldr	r3, [r3, #20]
 8000bbe:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000bc0:	887a      	ldrh	r2, [r7, #2]
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	4013      	ands	r3, r2
 8000bc6:	041a      	lsls	r2, r3, #16
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	43d9      	mvns	r1, r3
 8000bcc:	887b      	ldrh	r3, [r7, #2]
 8000bce:	400b      	ands	r3, r1
 8000bd0:	431a      	orrs	r2, r3
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	619a      	str	r2, [r3, #24]
}
 8000bd6:	bf00      	nop
 8000bd8:	3714      	adds	r7, #20
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be0:	4770      	bx	lr

08000be2 <HAL_MspInit>:
  * @note   This function is called from HAL_Init() function to perform system
  *         level initialization (GPIOs, clock, DMA, interrupt).
  * @retval None
  */
void HAL_MspInit(void)
{
 8000be2:	b480      	push	{r7}
 8000be4:	af00      	add	r7, sp, #0

}
 8000be6:	bf00      	nop
 8000be8:	46bd      	mov	sp, r7
 8000bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bee:	4770      	bx	lr

08000bf0 <debounceFSM_init>:
delay_t d_timer;


// carga el estado inicial

void debounceFSM_init() {
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0

	s_button1 = button_up;
 8000bf4:	4b03      	ldr	r3, [pc, #12]	; (8000c04 <debounceFSM_init+0x14>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	701a      	strb	r2, [r3, #0]

}
 8000bfa:	bf00      	nop
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c02:	4770      	bx	lr
 8000c04:	2000003c 	.word	0x2000003c

08000c08 <debounceFSM_update>:

// lee las entradas, resuelve la lógica de transición de estados y actualiza las salidas

void debounceFSM_update() {
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0


	switch (s_button1) {
 8000c0c:	4b33      	ldr	r3, [pc, #204]	; (8000cdc <debounceFSM_update+0xd4>)
 8000c0e:	781b      	ldrb	r3, [r3, #0]
 8000c10:	2b03      	cmp	r3, #3
 8000c12:	d857      	bhi.n	8000cc4 <debounceFSM_update+0xbc>
 8000c14:	a201      	add	r2, pc, #4	; (adr r2, 8000c1c <debounceFSM_update+0x14>)
 8000c16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c1a:	bf00      	nop
 8000c1c:	08000c2d 	.word	0x08000c2d
 8000c20:	08000c47 	.word	0x08000c47
 8000c24:	08000c79 	.word	0x08000c79
 8000c28:	08000c93 	.word	0x08000c93

		case button_up:

			if(BSP_PB_GetState(BUTTON_USER)){
 8000c2c:	2000      	movs	r0, #0
 8000c2e:	f7ff fbe9 	bl	8000404 <BSP_PB_GetState>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d048      	beq.n	8000cca <debounceFSM_update+0xc2>

				s_button1 = button_falling;
 8000c38:	4b28      	ldr	r3, [pc, #160]	; (8000cdc <debounceFSM_update+0xd4>)
 8000c3a:	2201      	movs	r2, #1
 8000c3c:	701a      	strb	r2, [r3, #0]
				delayRead(&d_timer);
 8000c3e:	4828      	ldr	r0, [pc, #160]	; (8000ce0 <debounceFSM_update+0xd8>)
 8000c40:	f7ff faf1 	bl	8000226 <delayRead>

			}

		break;
 8000c44:	e041      	b.n	8000cca <debounceFSM_update+0xc2>

		case button_falling:

			if (delayRead(&d_timer)) {
 8000c46:	4826      	ldr	r0, [pc, #152]	; (8000ce0 <debounceFSM_update+0xd8>)
 8000c48:	f7ff faed 	bl	8000226 <delayRead>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d03d      	beq.n	8000cce <debounceFSM_update+0xc6>

				if(BSP_PB_GetState(BUTTON_USER)){
 8000c52:	2000      	movs	r0, #0
 8000c54:	f7ff fbd6 	bl	8000404 <BSP_PB_GetState>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d008      	beq.n	8000c70 <debounceFSM_update+0x68>
					s_button1 = button_down;
 8000c5e:	4b1f      	ldr	r3, [pc, #124]	; (8000cdc <debounceFSM_update+0xd4>)
 8000c60:	2202      	movs	r2, #2
 8000c62:	701a      	strb	r2, [r3, #0]
					d_timer.running = false;
 8000c64:	4b1e      	ldr	r3, [pc, #120]	; (8000ce0 <debounceFSM_update+0xd8>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	721a      	strb	r2, [r3, #8]
					buttonPressed();
 8000c6a:	f000 f83b 	bl	8000ce4 <buttonPressed>
					s_button1 = button_up;
				}

			}

		break;
 8000c6e:	e02e      	b.n	8000cce <debounceFSM_update+0xc6>
					s_button1 = button_up;
 8000c70:	4b1a      	ldr	r3, [pc, #104]	; (8000cdc <debounceFSM_update+0xd4>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	701a      	strb	r2, [r3, #0]
		break;
 8000c76:	e02a      	b.n	8000cce <debounceFSM_update+0xc6>

		case button_down:

			if(!BSP_PB_GetState(BUTTON_USER)){
 8000c78:	2000      	movs	r0, #0
 8000c7a:	f7ff fbc3 	bl	8000404 <BSP_PB_GetState>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d126      	bne.n	8000cd2 <debounceFSM_update+0xca>

				s_button1 = button_raising;
 8000c84:	4b15      	ldr	r3, [pc, #84]	; (8000cdc <debounceFSM_update+0xd4>)
 8000c86:	2203      	movs	r2, #3
 8000c88:	701a      	strb	r2, [r3, #0]
				delayRead(&d_timer);
 8000c8a:	4815      	ldr	r0, [pc, #84]	; (8000ce0 <debounceFSM_update+0xd8>)
 8000c8c:	f7ff facb 	bl	8000226 <delayRead>

			}

		break;
 8000c90:	e01f      	b.n	8000cd2 <debounceFSM_update+0xca>

		case button_raising:

			if (delayRead(&d_timer)) {
 8000c92:	4813      	ldr	r0, [pc, #76]	; (8000ce0 <debounceFSM_update+0xd8>)
 8000c94:	f7ff fac7 	bl	8000226 <delayRead>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d01b      	beq.n	8000cd6 <debounceFSM_update+0xce>

				if(!BSP_PB_GetState(BUTTON_USER)){
 8000c9e:	2000      	movs	r0, #0
 8000ca0:	f7ff fbb0 	bl	8000404 <BSP_PB_GetState>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d108      	bne.n	8000cbc <debounceFSM_update+0xb4>
					s_button1 = button_up;
 8000caa:	4b0c      	ldr	r3, [pc, #48]	; (8000cdc <debounceFSM_update+0xd4>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	701a      	strb	r2, [r3, #0]
					d_timer.running = false;
 8000cb0:	4b0b      	ldr	r3, [pc, #44]	; (8000ce0 <debounceFSM_update+0xd8>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	721a      	strb	r2, [r3, #8]
					buttonReleased();
 8000cb6:	f000 f81c 	bl	8000cf2 <buttonReleased>
				} else {
					s_button1 = button_down;
				}

			}
		break;
 8000cba:	e00c      	b.n	8000cd6 <debounceFSM_update+0xce>
					s_button1 = button_down;
 8000cbc:	4b07      	ldr	r3, [pc, #28]	; (8000cdc <debounceFSM_update+0xd4>)
 8000cbe:	2202      	movs	r2, #2
 8000cc0:	701a      	strb	r2, [r3, #0]
		break;
 8000cc2:	e008      	b.n	8000cd6 <debounceFSM_update+0xce>

		default:
			// presentar algun error;
			debounceFSM_init();
 8000cc4:	f7ff ff94 	bl	8000bf0 <debounceFSM_init>
		break;
 8000cc8:	e006      	b.n	8000cd8 <debounceFSM_update+0xd0>
		break;
 8000cca:	bf00      	nop
 8000ccc:	e004      	b.n	8000cd8 <debounceFSM_update+0xd0>
		break;
 8000cce:	bf00      	nop
 8000cd0:	e002      	b.n	8000cd8 <debounceFSM_update+0xd0>
		break;
 8000cd2:	bf00      	nop
 8000cd4:	e000      	b.n	8000cd8 <debounceFSM_update+0xd0>
		break;
 8000cd6:	bf00      	nop
	}

}
 8000cd8:	bf00      	nop
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	2000003c 	.word	0x2000003c
 8000ce0:	20000040 	.word	0x20000040

08000ce4 <buttonPressed>:

// inverte el estado del LED1

void buttonPressed() {
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0

	BSP_LED_Toggle(LED1);
 8000ce8:	2000      	movs	r0, #0
 8000cea:	f7ff fb1b 	bl	8000324 <BSP_LED_Toggle>
}
 8000cee:	bf00      	nop
 8000cf0:	bd80      	pop	{r7, pc}

08000cf2 <buttonReleased>:

//  inverte el estado del LED1

void buttonReleased() {
 8000cf2:	b580      	push	{r7, lr}
 8000cf4:	af00      	add	r7, sp, #0

	BSP_LED_Toggle(LED3);
 8000cf6:	2002      	movs	r0, #2
 8000cf8:	f7ff fb14 	bl	8000324 <BSP_LED_Toggle>

}
 8000cfc:	bf00      	nop
 8000cfe:	bd80      	pop	{r7, pc}

08000d00 <main>:

// estructura principal

int main(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0
  // inicialización de la capa de abstracción de hardware

  HAL_Init();
 8000d04:	f7ff fbf8 	bl	80004f8 <HAL_Init>

  // inicialización de los delays

  delayInit(&d_timer, timeDebounce);
 8000d08:	2128      	movs	r1, #40	; 0x28
 8000d0a:	4809      	ldr	r0, [pc, #36]	; (8000d30 <main+0x30>)
 8000d0c:	f7ff fa74 	bl	80001f8 <delayInit>

  // inicialización de los leds on-board

  BSP_LED_Init(LED1);
 8000d10:	2000      	movs	r0, #0
 8000d12:	f7ff fab7 	bl	8000284 <BSP_LED_Init>
  BSP_LED_Init(LED3);
 8000d16:	2002      	movs	r0, #2
 8000d18:	f7ff fab4 	bl	8000284 <BSP_LED_Init>

  /* Initialize BSP PB for BUTTON_USER */
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_GPIO);
 8000d1c:	2100      	movs	r1, #0
 8000d1e:	2000      	movs	r0, #0
 8000d20:	f7ff fb1a 	bl	8000358 <BSP_PB_Init>


  debounceFSM_init();
 8000d24:	f7ff ff64 	bl	8000bf0 <debounceFSM_init>

  // bucle infinito

  while (1) {

	  debounceFSM_update();
 8000d28:	f7ff ff6e 	bl	8000c08 <debounceFSM_update>
 8000d2c:	e7fc      	b.n	8000d28 <main+0x28>
 8000d2e:	bf00      	nop
 8000d30:	20000040 	.word	0x20000040

08000d34 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000d34:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d6c <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000d38:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000d3a:	e003      	b.n	8000d44 <LoopCopyDataInit>

08000d3c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000d3c:	4b0c      	ldr	r3, [pc, #48]	; (8000d70 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000d3e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000d40:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000d42:	3104      	adds	r1, #4

08000d44 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000d44:	480b      	ldr	r0, [pc, #44]	; (8000d74 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000d46:	4b0c      	ldr	r3, [pc, #48]	; (8000d78 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000d48:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000d4a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000d4c:	d3f6      	bcc.n	8000d3c <CopyDataInit>
  ldr  r2, =_sbss
 8000d4e:	4a0b      	ldr	r2, [pc, #44]	; (8000d7c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000d50:	e002      	b.n	8000d58 <LoopFillZerobss>

08000d52 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000d52:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000d54:	f842 3b04 	str.w	r3, [r2], #4

08000d58 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000d58:	4b09      	ldr	r3, [pc, #36]	; (8000d80 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000d5a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000d5c:	d3f9      	bcc.n	8000d52 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000d5e:	f7ff fb67 	bl	8000430 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d62:	f000 f811 	bl	8000d88 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d66:	f7ff ffcb 	bl	8000d00 <main>
  bx  lr    
 8000d6a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000d6c:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8000d70:	08000df8 	.word	0x08000df8
  ldr  r0, =_sdata
 8000d74:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000d78:	2000001c 	.word	0x2000001c
  ldr  r2, =_sbss
 8000d7c:	2000001c 	.word	0x2000001c
  ldr  r3, = _ebss
 8000d80:	2000004c 	.word	0x2000004c

08000d84 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d84:	e7fe      	b.n	8000d84 <ADC_IRQHandler>
	...

08000d88 <__libc_init_array>:
 8000d88:	b570      	push	{r4, r5, r6, lr}
 8000d8a:	4d0d      	ldr	r5, [pc, #52]	; (8000dc0 <__libc_init_array+0x38>)
 8000d8c:	4c0d      	ldr	r4, [pc, #52]	; (8000dc4 <__libc_init_array+0x3c>)
 8000d8e:	1b64      	subs	r4, r4, r5
 8000d90:	10a4      	asrs	r4, r4, #2
 8000d92:	2600      	movs	r6, #0
 8000d94:	42a6      	cmp	r6, r4
 8000d96:	d109      	bne.n	8000dac <__libc_init_array+0x24>
 8000d98:	4d0b      	ldr	r5, [pc, #44]	; (8000dc8 <__libc_init_array+0x40>)
 8000d9a:	4c0c      	ldr	r4, [pc, #48]	; (8000dcc <__libc_init_array+0x44>)
 8000d9c:	f000 f818 	bl	8000dd0 <_init>
 8000da0:	1b64      	subs	r4, r4, r5
 8000da2:	10a4      	asrs	r4, r4, #2
 8000da4:	2600      	movs	r6, #0
 8000da6:	42a6      	cmp	r6, r4
 8000da8:	d105      	bne.n	8000db6 <__libc_init_array+0x2e>
 8000daa:	bd70      	pop	{r4, r5, r6, pc}
 8000dac:	f855 3b04 	ldr.w	r3, [r5], #4
 8000db0:	4798      	blx	r3
 8000db2:	3601      	adds	r6, #1
 8000db4:	e7ee      	b.n	8000d94 <__libc_init_array+0xc>
 8000db6:	f855 3b04 	ldr.w	r3, [r5], #4
 8000dba:	4798      	blx	r3
 8000dbc:	3601      	adds	r6, #1
 8000dbe:	e7f2      	b.n	8000da6 <__libc_init_array+0x1e>
 8000dc0:	08000df0 	.word	0x08000df0
 8000dc4:	08000df0 	.word	0x08000df0
 8000dc8:	08000df0 	.word	0x08000df0
 8000dcc:	08000df4 	.word	0x08000df4

08000dd0 <_init>:
 8000dd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000dd2:	bf00      	nop
 8000dd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000dd6:	bc08      	pop	{r3}
 8000dd8:	469e      	mov	lr, r3
 8000dda:	4770      	bx	lr

08000ddc <_fini>:
 8000ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000dde:	bf00      	nop
 8000de0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000de2:	bc08      	pop	{r3}
 8000de4:	469e      	mov	lr, r3
 8000de6:	4770      	bx	lr
